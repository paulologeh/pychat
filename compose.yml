version: "3"

volumes:
  postgres_data:
  redis_data:
  flask: {}
  celery: {}
  shared_volume:

services:
  redis:
    image: redis:7.0.7-alpine3.17
    container_name: redis
    restart: always
    env_file: .env
    entrypoint: redis-server --requirepass $REDIS_PASSWORD
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:14-alpine3.17
    container_name: postgres
    restart: always
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  flask:
    build:
      context: backend
      dockerfile: ./backend.Dockerfile
    image: flask_app
    command: gunicorn "application:app" --config=gunicorn.config.py
    container_name: flask
    restart: always
    depends_on:
      - postgres
      - redis
    env_file: .env
    volumes: 
      - "./backend:/app"

  celery:
    build:
      context: backend
      dockerfile: ./backend.Dockerfile
    image: celery_app
    command: celery --app=app.tasks.celery worker
    container_name: celery
    restart: always
    depends_on:
      - postgres
      - redis
    env_file: .env
    volumes: 
      - "./backend:/app"
  
  webapp:
    build:
      context: frontend
      dockerfile: ./frontend.Dockerfile
    image: webapp
    container_name: webapp
    restart: always
    env_file: .env
    volumes:
      - shared_volume:/var/www/build

  nginx:
    image: nginx:1.23.3-alpine
    container_name: nginx
    restart: always
    depends_on:
      - flask
    ports:
      - "8001:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - shared_volume:/var/www/build